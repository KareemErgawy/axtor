 
/*
#### REQUIRED MACROS #####

FUNC
CONST_FUNC(INTRINSIC,RETURN,ACTUAL,ARGS,ARGC)
## describes a function intrinsic that is translated with the same argument list but another name

@INTRINSIC
	intrinsic function name in the C GLSL program
	
@RETURN
	return value
	
@ACTUAL
	proper intrinsic call name in accordance to OpenCL specs
	
@ARGS
	argument list
	
@ARGC
	number of arguments in @ARGS
	
	
NATIVE(NAME)

@NAME
	name of an opaque type that is natively supported on this platform
	
	
INFIX(OP,RET,INTRINSIC,ARGLIST)
## just as CONST_FUNC, but the name is translated to an infix operator and thus the argument list must have length 2

@OP
	infix operator token
	
@RET
	return type
	
@INTRINSIC
	intrinsic function name in the C GLSL program
	
@ARGLIST
	two component argument list
	
	
PASS(RET,INTRINSIC,ARG)
## wrapper for implicit conversions in the source program

@RET
	return type
	
@INTRINSIC
	intrinsic name
	
@ARG
	argument list of size 1

This file is used for both, specifying intrinsics for the GLSL backend and declaring intrinsic functions in the "Slang_Api.hpp" header


BUILTIN(TYPE,NAME,INTRINSIC)
## describes a reserved global symbol (global variable)

@TYPE
	type of the symbol
	
@NAME
	native name
	
@INTRINSIC
	C intrinsic name
	
GETTER(NAME,TYPE,ARGUMENT)
SETTER(NAME,TYPE,ARGUMENT)
## component accessor intrinsics(e.g. for matrices "getColumn")
(for GETTER : ARGUMENT=obj[,IDX])
(for SETTER : ARGUMENT=obj[,IDX],VAL)

@TYPE (only for getter)
	return type
	
@NAME
	intrinsic function name
	
@ARGUMENT
	argument list	

*/

#define TRANSFER(T,SUFFIX,TARGET) \
	PASS(T TARGET, convCONSTANTto##TARGET##_##SUFFIX,(T CONSTANT* x)) \
	PASS(T TARGET*,convGLOBALto##TARGET##_##SUFFIX,(T GLOBAL* x)) \
	PASS(T TARGET*,convPRIVATEto##TARGET##_##SUFFIX,(T PRIVATE* x)) \
	PASS(T TARGET*,convLOCALto##TARGET##_##SUFFIX,(T LOCAL* x)) \
	PASS(T TARGET*,convNOPTRto##TARGET##_##SUFFIX,(T NOPTR* x))
	
#define MEMORY_TRANSFER(T,S) \
	TRANSFER(T,S,CONSTANT) \
	TRANSFER(T,S,GLOBAL) \
	TRANSFER(T,S,PRIVATE) \
	TRANSFER(T,S,LOCAL) \
	TRANSFER(T,S,NOPTR)


#define NATIVE_TRANSFER(T) \
	NATIVE(T) \
	MEMORY_TRANSFER(T,T)

//### native types ###
NATIVE_TRANSFER(mat2x2)
NATIVE_TRANSFER(mat2x3)
NATIVE_TRANSFER(mat2x4)

NATIVE_TRANSFER(mat3x2)
NATIVE_TRANSFER(mat3x3)
NATIVE_TRANSFER(mat3x4)

NATIVE_TRANSFER(mat4x2)
NATIVE_TRANSFER(mat4x3)
NATIVE_TRANSFER(mat4x4)

NATIVE_TRANSFER(sampler1D)
NATIVE_TRANSFER(isampler1D)
NATIVE_TRANSFER(usampler1D)
NATIVE_TRANSFER(sampler1DArray)
NATIVE_TRANSFER(isampler1DArray)
NATIVE_TRANSFER(usampler1DArray)
NATIVE_TRANSFER(sampler1DShadow)
NATIVE_TRANSFER(sampler1DArrayShadow)

NATIVE_TRANSFER(sampler2D)
NATIVE_TRANSFER(isampler2D)
NATIVE_TRANSFER(usampler2D)
NATIVE_TRANSFER(sampler2DArray)
NATIVE_TRANSFER(isampler2DArray)
NATIVE_TRANSFER(usampler2DArray)
NATIVE_TRANSFER(sampler2DShadow)
NATIVE_TRANSFER(sampler2DArrayShadow)

NATIVE_TRANSFER(sampler3D)
NATIVE_TRANSFER(isampler3D)
NATIVE_TRANSFER(usampler3D)

NATIVE_TRANSFER(sampler2DRect)
NATIVE_TRANSFER(isampler2DRect)
NATIVE_TRANSFER(usampler2DRect)
NATIVE_TRANSFER(sampler2DRectShadow)

NATIVE_TRANSFER(samplerCube)
NATIVE_TRANSFER(isamplerCube)
NATIVE_TRANSFER(usamplerCube)
NATIVE_TRANSFER(samplerCubeShadow)

NATIVE_TRANSFER(samplerBuffer)
NATIVE_TRANSFER(isamplerBuffer)
NATIVE_TRANSFER(usamplerBuffer)

NATIVE_TRANSFER(sampler2DMS)
NATIVE_TRANSFER(isampler2DMS)
NATIVE_TRANSFER(usampler2DMS)

NATIVE_TRANSFER(sampler2DMSArray)
NATIVE_TRANSFER(isampler2DMSArray)
NATIVE_TRANSFER(usampler2DMSArray)

#define MAT(M,N) \
	mat##M##x##N

//### helper macros ###
//API functions (ordered according to GLSL 1.5 Quick Reference Card)
#define GENERIC_FLOAT_CONST_FUNCTIONS(SUFFIX,T,INTN,BOOLN) \
	/*special functions*/ \
	CONST_FUNC(radians_##SUFFIX,T,radians,(T),1)\
	CONST_FUNC(degrees_##SUFFIX,T,degrees,(T),1)\
	CONST_FUNC(sin_##SUFFIX,T,sin,(T),1)\
	CONST_FUNC(cos_##SUFFIX,T,cos,(T),1)\
	CONST_FUNC(tan_##SUFFIX,T,tan,(T),1)\
	\
	CONST_FUNC(asin_##SUFFIX,T,asin,(T),1)\
	CONST_FUNC(acos_##SUFFIX,T,acos,(T),1)\
	CONST_FUNC(atan_##SUFFIX,T,atan,(T,T),2)\
	CONST_FUNC(atanFrac_##SUFFIX,T,atan,(T),1)\
	\
	CONST_FUNC(sinh_##SUFFIX,T,sinh,(T),1)\
	CONST_FUNC(cosh_##SUFFIX,T,cosh,(T),1)\
	CONST_FUNC(tanh_##SUFFIX,T,tanh,(T),1)\
	\
	CONST_FUNC(asinh_##SUFFIX,T,asinh,(T),1)\
	CONST_FUNC(acosh_##SUFFIX,T,acosh,(T),1)\
	CONST_FUNC(atanh_##SUFFIX,T,atanh,(T),1)\
	\
	CONST_FUNC(pow_##SUFFIX,T,pow,(T,T),2)\
	CONST_FUNC(exp_##SUFFIX,T,exp,(T),1)\
	CONST_FUNC(log_##SUFFIX,T,log,(T),1)\
	CONST_FUNC(exp2_##SUFFIX,T,exp2,(T),1)\
	CONST_FUNC(log2_##SUFFIX,T,log2,(T),1)\
	\
	CONST_FUNC(sqrt_##SUFFIX,T,sqrt,(T),1)\
	CONST_FUNC(invSqrt_##SUFFIX,T,inversesqrt,(T),1)\
	CONST_FUNC(abs_##SUFFIX,T,abs,(T),1)\
	CONST_FUNC(sign_##SUFFIX,T,sign,(T),1)\
	\
	CONST_FUNC(floor_##SUFFIX,T,floor,(T),1)\
	CONST_FUNC(trunc_##SUFFIX,T,trunc,(T),1)\
	\
	CONST_FUNC(round_##SUFFIX,T,round,(T),1)\
	CONST_FUNC(roundEven_##SUFFIX,T,roundEven,(T),1)\
	\
	CONST_FUNC(ceil_##SUFFIX,T,ceil,(T),1)\
	CONST_FUNC(fract_##SUFFIX,T,fract,(T),1)\
	\
	CONST_FUNC(mod_##SUFFIX,T,mod,(T x,T y),2)\
	CONST_FUNC(min_##SUFFIX,T,min,(T x,T y),2)\
	CONST_FUNC(max_##SUFFIX,T,max,(T x,T y),2)\
	\
	CONST_FUNC(clamp_##SUFFIX,T,clamp,(T x,T minVal,T maxVal),3)\
	CONST_FUNC(clampScalar_##SUFFIX,T,clamp,(T x,float minVal,float maxVal),3)\
	\
	CONST_FUNC(mix_##SUFFIX,T,mix,(T x,T y,T a),3) \
	CONST_FUNC(mixScalar_##SUFFIX,T,mix,(T x,T y,float a),3) \
	CONST_FUNC(mixBool_##SUFFIX,T,mix,(T x,T y,BOOLN a),3) \
	\
	CONST_FUNC(step_##SUFFIX,T,step,(T edge,T x),2)\
	CONST_FUNC(stepScalar_##SUFFIX,T,step,(float edge,T x),2)\
	CONST_FUNC(smoothstep_##SUFFIX,T,smoothstep,(T edge0, T edge1, T x),3)\
	CONST_FUNC(smoothstepScalar_##SUFFIX,T,smoothstep,(float edge0, float edge1, T x),3)\
	\
	CONST_FUNC(isNan_##SUFFIX,BOOLN,isnan,(T x),1)\
	CONST_FUNC(isInf_##SUFFIX,BOOLN,isinf,(T x),1)\
	\
	CONST_FUNC(normalize_##SUFFIX,T,normalize,(T x),1)\
	CONST_FUNC(faceforward_##SUFFIX,T,faceforward,(T n, T i, T nRef),3)\
	CONST_FUNC(reflect_##SUFFIX,T,reflect,(T i, T n),2)\
	CONST_FUNC(refract_##SUFFIX,T,refract,(T i, T n, float eta),3)\
	\
	CONST_FUNC(dFdx_##SUFFIX,T,dFdx,(T p),1)\
	CONST_FUNC(dFdy_##SUFFIX,T,dFdy,(T p),1)\
	CONST_FUNC(fwidth_##SUFFIX,T,fwidth,(T p),1)

#define GENERIC_INTEGER_CONST_FUNCTIONS(SUFFIX,INTN)\
	CONST_FUNC(min_##SUFFIX,INTN,min,(INTN x, INTN y),2)\
	CONST_FUNC(max_##SUFFIX,INTN,max,(INTN x, INTN y),2)\
	\
	CONST_FUNC(clamp_##SUFFIX,INTN,clamp,(INTN x, INTN minVal,INTN maxVal),3)\
	CONST_FUNC(clampScalar_##SUFFIX,INTN,clamp,(INTN x, int minVal,int maxVal),3)\

#define GENERIC_SINT_CONST_FUNCTIONS(SUFFIX,INTN)\
	CONST_FUNC(abs_##SUFFIX,INTN,abs,(INTN x),1)\
	CONST_FUNC(sign_##SUFFIX,INTN,sign,(INTN x),1)\

#define GENERIC_RELATIONAL(SUFFIX,T,BOOLN) \
	CONST_FUNC(equal_##SUFFIX,BOOLN,equal,(T x, T y),2)\
	CONST_FUNC(notEqual_##SUFFIX,BOOLN,notEqual,(T x, T y),2)\
	CONST_FUNC(lessThanEqual_##SUFFIX,BOOLN,lessThanEqual,(T x, T y),2)\
	CONST_FUNC(lessThan_##SUFFIX,BOOLN,lessThan,(T x, T y),2)\
	CONST_FUNC(greaterThanEqual_##SUFFIX,BOOLN,greaterThanEqual,(T x, T y),2)\

#define GENERIC_VECTOR_API(SUFFIX,T,INTN,BOOLN) \
	/* functions */ \
	CONST_FUNC(length_##SUFFIX,float,length,(T x),1) \
	CONST_FUNC(distance_##SUFFIX,float,distance,(T x,T y),2) \
	CONST_FUNC(dot_##SUFFIX,float,dot,(T x,T y),2) \
	CONST_FUNC(cross_##SUFFIX,T,cross,(T x,T y),2) \
	\
	GENERIC_FLOAT_CONST_FUNCTIONS(SUFFIX,T,INTN,BOOLN)\
	GENERIC_RELATIONAL(SUFFIX,T,BOOLN)

#define GENERIC_BOOL_CONST_FUNCTIONS(SUFFIX,BOOLN)\
	CONST_FUNC(any_##SUFFIX,bool,any,(BOOLN b), 1)\
	CONST_FUNC(all_##SUFFIX,bool,all,(BOOLN b), 1)\
	CONST_FUNC(not_##SUFFIX,BOOLN,not,(BOOLN b), 1)\
	\
	CONST_FUNC(equal_##SUFFIX,BOOLN,equal,(BOOLN x,BOOLN y), 2)\
	CONST_FUNC(notEqual_##SUFFIX,BOOLN,notEqual,(BOOLN x,BOOLN y), 2)

#define GENERIC_SAMPLER_CONST_FUNCTIONS(SUFFIX,SAMPLER,ELEMENT,FCOORD,ICOORD) \
	CONST_FUNC(textureSize_##SUFFIX,ICOORD,textureSize,(SAMPLER sampler, int lod), 2)\
	\
	CONST_FUNC(texture_##SUFFIX,ELEMENT,texture,(SAMPLER sampler, FCOORD pos), 2)\
	CONST_FUNC(textureBiased_##SUFFIX,ELEMENT,texture,(SAMPLER sampler, FCOORD pos, float bias), 3) \
	\
	CONST_FUNC(textureLod_##SUFFIX,ELEMENT,textureLod,(SAMPLER sampler,FCOORD pos,float lod),3)\
	\
	CONST_FUNC(texelFetch_##SUFFIX,ELEMENT,texelFetch,(SAMPLER sampler, ICOORD P,int lod),3) \
	CONST_FUNC(texelFetchOffset_##SUFFIX,ELEMENT,texelFetchOffset,(SAMPLER sampler, ICOORD P,int lod, ICOORD offset),4) \
	\
	CONST_FUNC(textureOffset_##SUFFIX,ELEMENT,textureOffset,(SAMPLER sampler, FCOORD pos, ICOORD offset),3) \
	CONST_FUNC(textureOffsetBiased_##SUFFIX,ELEMENT,textureOffset,(SAMPLER sampler, FCOORD pos, ICOORD offset, float bias),4)
	
#define GENERIC_MS_SAMPLER_CONST_FUNCTIONS(SUFFIX,SAMPLER,ELEMENT,ICOORD) \
	CONST_FUNC(textureSize_##SUFFIX,ICOORD,textureSize,(SAMPLER sampler), 1)\
	\
	CONST_FUNC(texelFetch_##SUFFIX,ELEMENT,texelFetch,(SAMPLER sampler, ICOORD P, int sample),3)
	
#define GENERIC_SHADOW_SAMPLER_CONST_FUNCTIONS(SUFFIX,SAMPLER,FCOORD,FCOORD_NEXT,ICOORD) \
	CONST_FUNC(textureSize_##SUFFIX,ICOORD,textureSize,(SAMPLER sampler, int lod), 2)\
	\
	CONST_FUNC(texture_##SUFFIX,float,texture,(SAMPLER sampler, FCOORD P), 2)\
	CONST_FUNC(textureBiased_##SUFFIX,float,texture,(SAMPLER sampler, FCOORD P, float bias), 3)\
	\
	CONST_FUNC(textureOffset_##SUFFIX,float,textureOffset,(SAMPLER sampler, FCOORD P, ICOORD offset),3)\
	CONST_FUNC(textureOffsetBiased_##SUFFIX,float,textureOffset,(SAMPLER sampler, FCOORD P, ICOORD offset, float biased),4)\
	\
	CONST_FUNC(textureProj_##SUFFIX,float,textureProj,(SAMPLER sampler, float4 P),2)\
	CONST_FUNC(textureProjBiased_##SUFFIX,float,textureProj,(SAMPLER sampler, float4 P, float biased),3)
	
	/*CONST_FUNC(textureProjOffset_##SUFFIX,float,textureProjOffset,(SAMPLER sampler, float4 P, ICOORD offset),3)\
	CONST_FUNC(textureProjOffsetBiased_##SUFFIX,float,textureProjOffset,(SAMPLER sampler, float4 P, ICOORD offset, float bias),4)\
	\
	CONST_FUNC(textureProjLod_##SUFFIX,float,textureProjOffset,(SAMPLER sampler, float4 P, float lod, ICOORD offset), 4)\
	\
	CONST_FUNC(textureGrad_##SUFFIX,float, textureGrad,(SAMPLER sampler, float3 P, FCOORD dPdX, FCOORD dPdy),4)\
	\
	CONST_FUNC(textureProjGrad_##SUFFIX,float,textureProjGradOffset,(SAMPLER sampler, float4 P, FCOORD dPdx, FCOORD dPdY),4)\
	CONST_FUNC(textureProjGradOffset_##SUFFIX,float,textureProjGradOffset,(SAMPLER sampler, float4 P, FCOORD dPdx, FCOORD dPdy, ICOORD offset),5)\*/
	
	
/*
 * Cube - Shadow
 */	
CONST_FUNC(texture_cubeShadow,float,texture,(samplerCubeShadow sampler, float4 P),2)
CONST_FUNC(textureBiased_cubeShadow,float,texture,(samplerCubeShadow sampler, float4 P, float bias),3)
CONST_FUNC(textureGrad_cubeShadow,float,textureGrad,(samplerCubeShadow sampler, float4 P, float3 dPdx, float3 dPdy),4)
CONST_FUNC(textureGradOffset_cubeShadow,float,textureGrad,(samplerCubeShadow sampler, float4 P, float3 dPdx, float3 dPdy, int2 offset),5)
	/*
	\
	CONST_FUNC(#PRE "_textureProj_1D_v2", "textureProj", 2)\
	CONST_FUNC(#PRE "_textureProj_1D_v2_biased", "textureProj", 3)\
	CONST_FUNC(#PRE "_textureProj_1D_v4", "textureProj", 2)\
	CONST_FUNC(#PRE "_textureProj_1D_v4_biased", "textureProj", 3)\
	CONST_FUNC(#PRE "_textureProj_2D_v3", "textureProj", 2)\
	CONST_FUNC(#PRE "_textureProj_2D_v3_biased", "textureProj", 3)\
	CONST_FUNC(#PRE "_textureProj_2D_v4", "textureProj", 2)\
	CONST_FUNC(#PRE "_textureProj_2D_v4_biased", "textureProj", 3)\
	CONST_FUNC(#PRE "_textureProj_3D", "textureProj", 2)\
	CONST_FUNC(#PRE "_textureProj_3D_biased", "textureProj", 3)
*/


/*
* fragment shader input interpolation qualifiers
*/
#define GENERIC_INTERPOLANTS(SUFFIX,RETURN,ARGS) \
	INTERP(flat_##SUFFIX,RETURN,ARGS) \
	INTERP(smooth_##SUFFIX,RETURN,ARGS) \
	INTERP(noperspective_##SUFFIX,RETURN,ARGS) \
	INTERP(default_##SUFFIX,RETURN,ARGS)

#define GENERIC_INT_INTERP(SUFFIX,RETURN,ARGS) \
	INTERP(flat_##SUFFIX,RETURN,ARGS) \
	INTERP(default_##SUFFIX,RETURN,ARGS)
	
	


/*
* matrix product definitions
*/
#define GENERIC_MATRIX_PRODUCT_SUFFIX(M,N,K,A,B) \
	INFIX(*,MAT(M,N) NOPTR*,mul_##A##B,(MAT(M,K) NOPTR* a,MAT(K,N) NOPTR* b))

#define GENERIC_MATRIX_PRODUCT(M,N,K) \
	GENERIC_MATRIX_PRODUCT_SUFFIX(M,N,K,mat##M##x##K,_mat##K##x##N)
	
#define GENERIC_MATRIX_PRODUCT_K(M,N)\
	GENERIC_MATRIX_PRODUCT(M,N,4)\
	GENERIC_MATRIX_PRODUCT(M,N,3)\
	GENERIC_MATRIX_PRODUCT(M,N,2)
	
/*
* vector <-> matrix product
*/

#define GENERIC_MATRIX_VECTOR_PRODUCT(M,N) \
	INFIX(*,vec##N,mul_v##N##_mat##N##x##M,(vec##M v, MAT(M,N) NOPTR* m)) \
	INFIX(*,vec##M,mul_mat##N##x##M##_v##M,(MAT(M,N) NOPTR* m, vec##N v))

/*
* matrix operations
*/
#define GENERIC_MATRIX_MN(M,N) \
	GETTER(getElement_mat##N##x##M,float, (mat##N##x##M NOPTR* x, uint col, uint row))\
	SETTER(setElement_mat##N##x##M,(mat##N##x##M NOPTR* x, uint col, uint row, float val))\
	GETTER(getVector_mat##N##x##M,vec##N, (mat##N##x##M NOPTR* x, uint col))\
	SETTER(setVector_mat##N##x##M, (mat##N##x##M NOPTR* x, uint col, vec4 val))\
	CONST_FUNC(matrixCompMult_mat##N##x##M,mat##N##x##M NOPTR*,matrixCompMult,(mat##N##x##M NOPTR* x, mat##N##x##M NOPTR* y),2) \
	CONST_FUNC(outerProduct_mat##N##x##M,mat##N##x##M NOPTR*,outerProduct,(vec##M c, vec##N r),2) \
	CONST_FUNC(transpose_mat##M##x##N,mat##N##x##M NOPTR*,transpose,(mat##M##x##N NOPTR* m),1) \
	\
	INFIX(+,mat##M##x##N,add_mat##M##x##N,(mat##M##x##N NOPTR* a,mat##M##x##N NOPTR* b)) \
	INFIX(-,mat##M##x##N,sub_mat##M##x##N,(mat##M##x##N NOPTR* a,mat##M##x##N NOPTR* b)) \
	\
	GENERIC_MATRIX_VECTOR_PRODUCT(M,N)
	
#define GENERIC_MATRIX_N(N) \
	CONST_FUNC(outerProduct_mat##N,mat##N NOPTR*,outerProduct,(vec##N c, vec##N r),2) \
	CONST_FUNC(transpose_mat##N,mat##N NOPTR*,transpose,(mat##N NOPTR* m),1) \
	CONST_FUNC(determinant_##mat##N,float,determinant,(mat##N NOPTR* m),1) \
	CONST_FUNC(inverse_mat##N,mat##N NOPTR*,inverse,(mat##N NOPTR* m),1) \
	CONST_FUNC(matrixCompMult_mat##N,mat##N##x##N NOPTR*,matrixCompMult,(mat##N##x##N NOPTR* x, mat##N##x##N NOPTR* y),2) \
	GENERIC_MATRIX_MN(N,N)
	
	//GENERIC_MATRIX_VECTOR_PRODUCT(N,N)
	
	

//##### MATRICES #####
		CONST_FUNC(mat2x2_ctor_column_f2f2,mat2x2 NOPTR *,mat2x2,(vec2 x, vec2 y),2)
		CONST_FUNC(mat3x3_ctor_column_f3f3f3,mat3x3 NOPTR *,mat3x3,(vec3 x, vec3 y, vec3 z),3)
		CONST_FUNC(mat4x4_ctor_column_f4f4f4f4,mat4x4 NOPTR *,mat4x4,(vec4 x, vec4 y, vec4 z, vec4 w),4)
		
		GENERIC_MATRIX_MN(2,3)
		GENERIC_MATRIX_MN(2,4)
		GENERIC_MATRIX_MN(3,2)
		GENERIC_MATRIX_MN(3,4)
		GENERIC_MATRIX_MN(4,2)
		GENERIC_MATRIX_MN(4,3)
		
		GENERIC_MATRIX_N(2)
		GENERIC_MATRIX_N(3)
		GENERIC_MATRIX_N(4)
		
		
		GENERIC_MATRIX_PRODUCT_K(4,4)
		GENERIC_MATRIX_PRODUCT_K(4,3)
		GENERIC_MATRIX_PRODUCT_K(4,2)
		
		GENERIC_MATRIX_PRODUCT_K(3,4)
		GENERIC_MATRIX_PRODUCT_K(3,3)
		GENERIC_MATRIX_PRODUCT_K(3,2)
		
		GENERIC_MATRIX_PRODUCT_K(2,4)
		GENERIC_MATRIX_PRODUCT_K(2,3)
		GENERIC_MATRIX_PRODUCT_K(2,2)
						 
	//##### DEFINITIONS #####

		//#### vec4 ####
		GENERIC_VECTOR_API(f4,float4,int4,bool4)

		//#### vec3 ####
		GENERIC_VECTOR_API(f3,float3,int3,bool3)

		//#### vec2 ####
		GENERIC_VECTOR_API(f2,float2,int2,bool2)

		//### scalar ###
		GENERIC_FLOAT_CONST_FUNCTIONS(f,float,int,bool)

		//#### i|u4 ####
		GENERIC_INTEGER_CONST_FUNCTIONS(i4,int4)
		GENERIC_INTEGER_CONST_FUNCTIONS(u4,uint4)

		GENERIC_SINT_CONST_FUNCTIONS(i4,int4)

		//#### i|u3 ####
		//ctors
		GENERIC_INTEGER_CONST_FUNCTIONS(i3,int3)

		GENERIC_SINT_CONST_FUNCTIONS(i3,int3)

		//#### i|u2 ####
		GENERIC_INTEGER_CONST_FUNCTIONS(i2,int2)
		GENERIC_INTEGER_CONST_FUNCTIONS(u2,uint2)

		GENERIC_SINT_CONST_FUNCTIONS(i2,int2)

		//### Integer ###
		GENERIC_INTEGER_CONST_FUNCTIONS(i,int)
		GENERIC_INTEGER_CONST_FUNCTIONS(u,uint)
		GENERIC_SINT_CONST_FUNCTIONS(i,int)


		//### Bool ###
		GENERIC_BOOL_CONST_FUNCTIONS(b4,bool4)
		GENERIC_BOOL_CONST_FUNCTIONS(b3,bool3)
		GENERIC_BOOL_CONST_FUNCTIONS(b2,bool2)

		/*
		 * texture sampling
		 */
		GENERIC_SAMPLER_CONST_FUNCTIONS(1D_f4,sampler1D GLOBAL *,vec4,float,int)
		GENERIC_SAMPLER_CONST_FUNCTIONS(1D_i4,isampler1D GLOBAL *,int4,float,int)
		GENERIC_SAMPLER_CONST_FUNCTIONS(1D_u4,usampler1D GLOBAL *,uint4,float,int)
		
		GENERIC_SAMPLER_CONST_FUNCTIONS(2D_f4,sampler2D GLOBAL *,float4,vec2,int2)
		GENERIC_SAMPLER_CONST_FUNCTIONS(2D_i4,isampler2D GLOBAL *,int4,vec2,int2)
		GENERIC_SAMPLER_CONST_FUNCTIONS(2D_u4,usampler2D GLOBAL *,uint4,vec2,int2)
		
		GENERIC_SAMPLER_CONST_FUNCTIONS(3D_f4,sampler3D GLOBAL *,float4,vec3,int3)
		GENERIC_SAMPLER_CONST_FUNCTIONS(3D_i4,isampler3D GLOBAL *,int4,vec3,int3)
		GENERIC_SAMPLER_CONST_FUNCTIONS(3D_u4,usampler3D GLOBAL *,uint4,vec3,int3)
		
		GENERIC_MS_SAMPLER_CONST_FUNCTIONS(2DMS_f4,sampler2DMS GLOBAL*,vec4,int)
		GENERIC_MS_SAMPLER_CONST_FUNCTIONS(2DMSArray_f4,sampler2DMS GLOBAL*,vec4,int3)
		
		GENERIC_MS_SAMPLER_CONST_FUNCTIONS(2DMS_i4,isampler2DMS GLOBAL*,int4,int)
		GENERIC_MS_SAMPLER_CONST_FUNCTIONS(2DMSArray_i4,isampler2DMS GLOBAL*,int4,int3)
		
		GENERIC_MS_SAMPLER_CONST_FUNCTIONS(2DMS_u4,usampler2DMS GLOBAL*,uint4,int)
		GENERIC_MS_SAMPLER_CONST_FUNCTIONS(2DMSArray_u4,usampler2DMS GLOBAL*,uint4,int3)
		
		GENERIC_SHADOW_SAMPLER_CONST_FUNCTIONS(1DShadow,sampler1DShadow,vec3,vec4,int)
		GENERIC_SHADOW_SAMPLER_CONST_FUNCTIONS(2DShadow,sampler2DShadow,vec3,vec4,int2)

		/*
		 * fragment shader input interpolants
		 */
		GENERIC_INTERPOLANTS(f4,float4,(float4 x))
		GENERIC_INTERPOLANTS(f3,float3,(float3 x))
		GENERIC_INTERPOLANTS(f2,float2,(float2 x))
		GENERIC_INTERPOLANTS(f,float,(float x))

		GENERIC_INT_INTERP(i,int,(int x))
		GENERIC_INT_INTERP(i2,int2,(int2 x))
		GENERIC_INT_INTERP(i3,int3,(int3 x))
		GENERIC_INT_INTERP(i4,int4,(int4 x))
		
		GENERIC_INT_INTERP(u,uint,(uint x))
		GENERIC_INT_INTERP(u2,uint2,(uint2 x))
		GENERIC_INT_INTERP(u3,uint3,(uint3 x))
		GENERIC_INT_INTERP(u4,uint4,(uint4 x))
		
		GENERIC_INTERPOLANTS(b,bool,(bool x))
#undef MAT
#undef JOIN

#undef GENERIC_INTEGER_CONST_FUNCTIONS
#undef GENERIC_SINT_CONST_FUNCTIONS
#undef GENERIC_FLOAT_CONST_FUNCTIONS
#undef GENERIC_BOOL_API
#undef GENERIC_VECTOR_API
#undef GENERIC_SAMPLER_CONST_FUNCTIONS
#undef GENERIC_MS_SAMPLER_CONST_FUNCTIONS
#undef GENERIC_SHADOW_SAMPLER_CONST_FUNCTIONS
#undef GENERIC_INTERPOLANTS
#undef GENERIC_RELATIONAL
#undef GENERIC_MATRIX_MN
#undef GENERIC_MATRIX_N
#undef GENERIC_MATRIC_PRODUCT
#undef GENERIC_MATRIX_PRODUCT_SUFFIX
#undef GENERIC_MATRIC_PRODUCT_K

/*
* memory space conversion (from X to local NOPTR space)
*/
	
#undef TRANSFER
#undef MEMORY_TRANSFER
#undef NATIVE_TRANSFER
	

/*
* predeclared global variables
*/
BUILTIN(float,gl_FragDepth,gl_FragDepth)
BUILTIN(vec4,gl_Position,gl_Position)
