#ifdef __AXTOR_INTERNAL
#define INTERNAL(X) X
#else
#define INTERNAL(X)
#endif  

/*

This file is used for both, specifying intrinsics for the OpenCL backend and declaring intrinsic functions in the "Compute_Api.hpp" header

21.04.2010 created

#### REQUIRED MACROS #####

CONST_FUNC(INTRINSIC,RETURN,ACTUAL,ARGS,ARGC) Additionally is declared as function w/o side-effects
FUNC(INTRINSIC,RETURN,ACTUAL,ARGS,ARGC)

@INTRINSIC
	intrinsic call name in the LLVM bitcode
	
@RETURN
	return value
	
@ACTUAL
	proper intrinsic call name in accordance to OpenCL specs
	
@ARGS
	argument list
	
@ARGC
	number of arguments in @ARGS
	
	
CONST_CONST_COMPLEX(INTRINSIC, RETURN, FORMAT, ARGS) Additionally is declared as function w/o side-effects
CONST_COMPLEX(INTRINSIC, RETURN, FORMAT, ARGS)

@INTRINSIC
	intrinsic function name in the LLVM bitcode
	
@RETURN
	return value
	
@FORMAT
	format string for building the actual textual OpenCL representation.
	
@ARGS
	argument list
	
@ARGC
	number of arguments in @ARGS

	
	
NATIVE(NAME)

@NAME
	name of an opaque type that is natively supported on this platform
	
	

REPLACE_FUNC(NAME,RETURN,REPLACEMENT)

@NAME
	name of the intrinsic function
	
@RETURN
	return type of the function
	
@REPLACEMENT
	replacement string for calls to this function
	
	
MUTE(NAME) [only used for particular intrinsics]

@NAME
	name of the surpressed intrinsic
	
@NAME
*/


/*
 * Native LLVM intrinsics
 */
CONST_FUNC(llvm.exp.f32,float,exp,(float),1)
CONST_FUNC(llvm.fabs.f32,float,fabs,(float),1)
CONST_FUNC(llvm.log2.f32,float,log2,(float),1)
CONST_FUNC(llvm.sqrt.f32,float,sqrt,(float),1)
CONST_FUNC(llvm.cos.f32,float,cos,(float),1)
CONST_FUNC(llvm.sin.f32,float,sin,(float),1)



/*
 * NATIVE TYPES
 */
NATIVE(event_t)
NATIVE(sampler_t)
NATIVE(image2d_t)
NATIVE(image3d_t)


#define COMMON_BUILTIN(SUFFIX,T,INTN) \
	CONST_FUNC(clamp_##SUFFIX,T,clamp,(T x,T min,T max),3) \
	\
	CONST_FUNC(degrees_##SUFFIX,T,degrees,(T x),1) \
	CONST_FUNC(radians_##SUFFIX,T,radians,(T x),1) \
	\
	CONST_FUNC(max_##SUFFIX,T,max,(T x,T y),2) \
	CONST_FUNC(min_##SUFFIX,T,min,(T x,T y),2) \
	\
	CONST_FUNC(mix_##SUFFIX,T,mix,(T x, T y, T a),3)\
	\
	CONST_FUNC(step_##SUFFIX,T,step,(T edge, T x),2)\
	CONST_FUNC(smoothstep_##SUFFIX,T,smoothstep,(T edge0,T edge1,T x),3)\
	\
	CONST_FUNC(sign_##SUFFIX,T,sign,(T x),1)	\
	\
	CONST_FUNC(select_##SUFFIX,T,select,(T a, T b, INTN x),3)		


#define MATH_BUILTIN(SUFFIX,T,INTN) \
	CONST_FUNC(acos_##SUFFIX,T,acos,(T),1) \
	CONST_FUNC(acosh_##SUFFIX,T,acosh,(T),1) \
	CONST_FUNC(acospi_##SUFFIX,T,acospi,(T),1) \
	\
	CONST_FUNC(asin_##SUFFIX,T,asin,(T),1) \
	CONST_FUNC(asinh_##SUFFIX,T,asinh,(T),1) \
	CONST_FUNC(asinpi_##SUFFIX,T,asinpi,(T),1) \
	\
	CONST_FUNC(atan_##SUFFIX,T,atan,(T),1) \
	CONST_FUNC(atan2_##SUFFIX,T,atan2, (T),1) \
	CONST_FUNC(atanh_##SUFFIX,T,atanh,(T),1) \
	CONST_FUNC(atanpi_##SUFFIX,T,atanpi,(T),1) \
	CONST_FUNC(atan2pi_##SUFFIX,T,atan2pi, (T),1) \
	\
	CONST_FUNC(cbrt_##SUFFIX,T,cbrt,(T x),1) \
	CONST_FUNC(ceil_##SUFFIX,T,ceil,(T x),1) \
	CONST_FUNC(copysign_##SUFFIX,T,copysign,(T x, T y),2) \
	\
	CONST_FUNC(cos_##SUFFIX,T,cos,(T),1) \
	CONST_FUNC(half_cos_##SUFFIX,T,half_cos,(T),1) \
	CONST_FUNC(native_cos_##SUFFIX,T,native_cos,(T),1) \
	\
	CONST_FUNC(cosh_##SUFFIX,T,cosh,(T),1) \
	CONST_FUNC(cospi_##SUFFIX,T,cospi,(T),1) \
	\
	CONST_FUNC(erfc_##SUFFIX,T,erfc,(T),1) \
	CONST_FUNC(erf_##SUFFIX,T,erf,(T),1) \
	CONST_FUNC(exp_##SUFFIX,T,exp,(T),1) \
	CONST_FUNC(half_exp_##SUFFIX,T,half_exp,(T),1) \
	CONST_FUNC(native_exp_##SUFFIX,T,native_exp,(T),1) \
	\
	CONST_FUNC(exp2_##SUFFIX,T,exp2,(T),1) \
	CONST_FUNC(half_exp2_##SUFFIX,T,half_exp2,(T),1) \
	CONST_FUNC(native_exp2_##SUFFIX,T,native_exp2,(T),1) \
	\
	CONST_FUNC(exp10_##SUFFIX,T,exp10,(T),1) \
	CONST_FUNC(half_exp10_##SUFFIX,T,half_exp10,(T),1) \
	CONST_FUNC(native_exp10_##SUFFIX,T,native_exp10,(T),1) \
	\
	CONST_FUNC(expm1_##SUFFIX,T,expm1,(T),1) \
	\
	CONST_FUNC(abs_##SUFFIX,T,fabs,(T),1) \
	CONST_FUNC(dim_##SUFFIX,T,fdim,(T x, T y),2) \
	CONST_FUNC(floor_##SUFFIX,T,floor,(T),1) \
	CONST_FUNC(ma_##SUFFIX,T,fma,(T a, T b, T c),3) \
	\
	CONST_FUNC(max_##SUFFIX,T,fmax,(T x, T y),2) \
	CONST_FUNC(min_##SUFFIX,T,fmin,(T x, T y),2) \
	\
	CONST_FUNC(mod_##SUFFIX,T,fmod,(T x, T y),2) \
	\
	CONST_FUNC(fract_global_##SUFFIX,T,fract,(T x, T GLOBAL * iptr),2) \
	CONST_FUNC(fract_local_##SUFFIX,T,fract,(T x, T LOCAL * iptr),2) \
	CONST_FUNC(fract_##SUFFIX,T,fract,(T x, T  * iptr),2) \
	\
	CONST_FUNC(rexp_global_##SUFFIX,T,frexp,(T x, T GLOBAL * iptr),2) \
	CONST_FUNC(rexp_local_##SUFFIX,T,frexp,(T x, T LOCAL * iptr),2) \
	CONST_FUNC(rexp_##SUFFIX,T,frexp,(T x, T * iptr),2) \
	\
	CONST_FUNC(hypot_##SUFFIX,T,hypot,(T x,T y),2) \
	CONST_FUNC(ilogb_##SUFFIX,INTN,ilogb,(T x),1) \
	\
	CONST_FUNC(ldexp_##SUFFIX,T,ldexp,(T x, INTN n),2) \
	CONST_FUNC(ldgamma_##SUFFIX,T,ldgamma,(T x),1) \
	\
	CONST_FUNC(ldgamma_r_global_##SUFFIX,T,ldgamma_r,(T x, INTN GLOBAL * signp),2) \
	CONST_FUNC(ldgamma_r_local_##SUFFIX,T,ldgamma_r,(T x, INTN LOCAL * signp),2) \
	CONST_FUNC(ldgamma_r_##SUFFIX,T,ldgamma_r,(T x, INTN * signp),2) \
	\
	CONST_FUNC(log_##SUFFIX,T,log,(T x),1) \
	CONST_FUNC(half_log_##SUFFIX,T,half_log,(T x),1) \
	CONST_FUNC(native_log_##SUFFIX,T,native_log,(T x),1) \
	\
	CONST_FUNC(log2_##SUFFIX,T,log2,(T x),1) \
	CONST_FUNC(half_log2_##SUFFIX,T,half_log2,(T x),1) \
	CONST_FUNC(native_log2_##SUFFIX,T,native_log2,(T x),1) \
	\
	CONST_FUNC(log10_##SUFFIX,T,log10,(T x),1) \
	CONST_FUNC(half_log10_##SUFFIX,T,half_log10,(T x),1) \
	CONST_FUNC(native_log10_##SUFFIX,T,native_log10,(T x),1) \
	\
	CONST_FUNC(log1p_##SUFFIX,T,log1p,(T x),1) \
	CONST_FUNC(log1b_##SUFFIX,T,log1b,(T x),1) \
	\
	CONST_FUNC(mad_##SUFFIX,T,mad,(T a, T b, T c),3) \
	CONST_FUNC(modf_global_##SUFFIX,T,modf,(T a, INTN GLOBAL * iptr),2) \
	CONST_FUNC(modf_local_##SUFFIX,T,modf,(T a, INTN LOCAL * iptr),2) \
	CONST_FUNC(modf_##SUFFIX,T,modf,(T a, INTN * iptr),2) \
	\
	CONST_FUNC(nextafter_##SUFFIX,T,nextafter,(T x, T y),2) \
	CONST_FUNC(pow_##SUFFIX,T,pow,(T x, T y),2) \
	CONST_FUNC(pown_##SUFFIX,T,pown,(T x, INTN y),2) \
	\
	CONST_FUNC(powr_##SUFFIX,T,powr,(T x, T y),2) \
	CONST_FUNC(half_powr_##SUFFIX,T,half_powr,(T x, T y),2) \
	CONST_FUNC(native_powr_##SUFFIX,T,native_powr,(T x, T y),2) \
	\
	CONST_FUNC(remainder_##SUFFIX,T,remainder,(T x, T y),2) \
	\
	CONST_FUNC(remquo_global_##SUFFIX,T,remquo,(T x, T y, INTN GLOBAL * quo),3) \
	CONST_FUNC(remquo_local_##SUFFIX,T,remquo,(T x, T y, INTN LOCAL * quo),3) \
	CONST_FUNC(remquo_##SUFFIX,T,remquo,(T x, T y, INTN * quo),3) \
	\
	CONST_FUNC(rint_##SUFFIX,T,rint,(T x),1) \
	CONST_FUNC(rootn_##SUFFIX,T,rootn,(T x, INTN y),2) \
	CONST_FUNC(round_##SUFFIX,T,round,(T x),1) \
	\
	CONST_FUNC(rsqrt_##SUFFIX,T,rsqrt,(T x),1) \
	CONST_FUNC(half_rsqrt_##SUFFIX,T,half_rsqrt,(T x),1) \
	CONST_FUNC(native_rsqrt_##SUFFIX,T,native_rsqrt,(T x),1) \
	\
	CONST_FUNC(sin_##SUFFIX,T,sin,(T x),1) \
	CONST_FUNC(half_sin_##SUFFIX,T,half_sin,(T x),1) \
	CONST_FUNC(native_sin_##SUFFIX,T,native_sin,(T x),1) \
	\
	CONST_FUNC(sincos_global_##SUFFIX,T,sincos,(T x, T GLOBAL * cosval),2) \
	CONST_FUNC(sincos_local_##SUFFIX,T,sincos,(T x, T LOCAL * cosval),2) \
	CONST_FUNC(sincos_##SUFFIX,T,sincos,(T x, T * cosval),2) \
	\
	CONST_FUNC(sinh_##SUFFIX,T,sinh,(T x),1) \
	CONST_FUNC(sinpi_##SUFFIX,T,sinpi,(T x),1) \
	\
	CONST_FUNC(sqrt_##SUFFIX,T,sqrt,(T x),1) \
	CONST_FUNC(half_sqrt_##SUFFIX,T,half_sqrt,(T x),1) \
	CONST_FUNC(native_sqrt_##SUFFIX,T,native_sqrt,(T x),1) \
	\
	CONST_FUNC(tan_##SUFFIX,T,tan,(T x),1) \
	CONST_FUNC(half_tan_##SUFFIX,T,half_tan,(T x),1) \
	CONST_FUNC(native_tan_##SUFFIX,T,native_tan,(T x),1) \
	\
	CONST_FUNC(tanh_##SUFFIX,T,tanh,(T x),1) \
	CONST_FUNC(tanpi_##SUFFIX,T,tanpi,(T x),1) \
	\
	CONST_FUNC(tgamma_##SUFFIX,T,tgamma,(T x),1) \
	CONST_FUNC(trunc_##SUFFIX,T,trunc,(T x),1)
	
//floatn == T
#define GEOMETRIC_BUILTIN(SUFFIX,T) \
	CONST_FUNC(cross_##SUFFIX,T,cross,(T x, T y),2)\
	CONST_FUNC(dot_##SUFFIX,float,dot,(T x,T y),2) \
	CONST_FUNC(distance_##SUFFIX,float,distance,(T x,T y),2) \
	CONST_FUNC(length_##SUFFIX,float,length,(T x),1) \
	CONST_FUNC(normalize_##SUFFIX,T,normalize,(T x),1) \
	\
	CONST_FUNC(fast_distance_##SUFFIX,float,fast_distance,(T x,T y),2) \
	CONST_FUNC(fast_length_##SUFFIX,float,fast_length,(T x),1) \
	CONST_FUNC(fast_normalize_##SUFFIX,T,fast_normalize,(T x),1)

/*
 * type casts
 */
#define CONVERT_A_B(INTN,ISUFF,FLOATN,FSUFF) \
	CONST_FUNC(convert_##ISUFF##_##FSUFF,INTN,convert_##INTN,(FLOATN x),1) \
	CONST_FUNC(convert_##FSUFF##_##ISUFF,FLOATN,convert_##FLOATN,(INTN x),1)

//unsigned to signed	
#define CONVERT_UA_B(SRC,USRC,USRCSUFF,DEST,DESTSUFF) \
	CONST_COMPLEX(convert_##DESTSUFF##_##USRCSUFF,DEST,convert_ ##DEST(as_ ##USRC(%)) ,(USRC x)) \
	CONST_COMPLEX(convert_##USRCSUFF##_##DESTSUFF,SRC,as_ ##SRC(convert_ ##USRC(%)),(DEST x))
	
	//unsigned to signed	
#define CONVERT_UA_UB(SRC,USRC,USRCSUFF,DEST,UDEST,UDESTSUFF) \
	CONST_COMPLEX(convert_##USRCSUFF##_##UDESTSUFF,SRC,as_ ##SRC(convert_ ##USRC(as_ ##UDEST(%))) ,(UDEST x)) \
	CONST_COMPLEX(convert_##UDESTSUFF##_##USRCSUFF,DEST,as_ ##DEST(convert_ ##UDEST(as_ ##USRC(%))),(USRC x))
	



#define INTEGER_BUILTIN(SUFFIX,I) \
	CONST_FUNC(pow_##SUFFIX,I,pow,(I x, I y),2)

/*
 * BUILTIN API
 */
 
INTEGER_BUILTIN(u,uint)
INTEGER_BUILTIN(u2,uint2)
INTEGER_BUILTIN(u3,uint3)
INTEGER_BUILTIN(u4,uint4)

INTEGER_BUILTIN(i,int)
INTEGER_BUILTIN(i2,int2)
INTEGER_BUILTIN(i3,int3)
INTEGER_BUILTIN(i4,int4)
 
COMMON_BUILTIN(f,float,int)
COMMON_BUILTIN(f2,float2,int2)
COMMON_BUILTIN(f4,float4,int4)
COMMON_BUILTIN(f8,float8,int8)
COMMON_BUILTIN(f16,float16,int16)
	
MATH_BUILTIN(f,float,int)
MATH_BUILTIN(f2,float2,int2)
MATH_BUILTIN(f4,float4,int4)
MATH_BUILTIN(f8,float8,int8)
MATH_BUILTIN(f16,float16,int16)

GEOMETRIC_BUILTIN(f,float)
GEOMETRIC_BUILTIN(f2,float2)
GEOMETRIC_BUILTIN(f4,float4)
GEOMETRIC_BUILTIN(f8,float8)
GEOMETRIC_BUILTIN(f16,float16)




/*
 * TYPE CONVERSIONS
 */
// INTEGER
// int - double
CONVERT_A_B(int,i,double,d)
CONVERT_A_B(int2,i2,double2,d2)
CONVERT_A_B(int3,i3,double3,d3)
CONVERT_A_B(int4,i4,double4,d4)

// uint - double
CONVERT_UA_B(int,uint,u,double,d)
CONVERT_UA_B(int2,uint2,u2,double2,d2)
CONVERT_UA_B(int3,uint3,u3,double3,d3)
CONVERT_UA_B(int4,uint4,u4,double4,d4)

// int - float
CONVERT_A_B(int,i,float,f)
CONVERT_A_B(int2,i2,float2,f2)
CONVERT_A_B(int3,i3,float3,f3)
CONVERT_A_B(int4,i4,float4,f4)

// uint - float
CONVERT_UA_B(int,uint,u,float,f)
CONVERT_UA_B(int2,uint2,u2,float2,f2)
CONVERT_UA_B(int3,uint3,u3,float3,f3)
CONVERT_UA_B(int4,uint4,u4,float4,f4)

// int u - s
CONVERT_UA_B(int,uint,u,int,i)
CONVERT_UA_B(int2,uint2,u2,int2,i2)
CONVERT_UA_B(int3,uint3,u3,int3,i3)
CONVERT_UA_B(int4,uint4,u4,int4,i4)


// SHORT
// short - float
CONVERT_A_B(short,s,float,f)
CONVERT_A_B(short2,s2,float2,f2)
CONVERT_A_B(short3,s3,float3,f3)
CONVERT_A_B(short4,s4,float4,f4)

// ushort - float
CONVERT_UA_B(short,ushort,us,float,f)
CONVERT_UA_B(short2,ushort2,us2,float2,f2)
CONVERT_UA_B(short3,ushort3,us3,float3,f3)
CONVERT_UA_B(short4,ushort4,us4,float4,f4)

// short u - s
CONVERT_UA_B(short,ushort,us,short,s)
CONVERT_UA_B(short2,ushort2,us2,short2,s2)
CONVERT_UA_B(short3,ushort3,us3,short3,s3)
CONVERT_UA_B(short4,ushort4,us4,short4,s4)


// CHAR
// uchar - float
CONVERT_UA_B(char,uchar,uc,float,f)
CONVERT_UA_B(char2,uchar2,uc2,float2,f2)
CONVERT_UA_B(char3,uchar3,uc3,float3,f3)
CONVERT_UA_B(char4,uchar4,uc4,float4,f4)

// uchar - int
CONVERT_UA_B(char,uchar,uc,int,i)
CONVERT_UA_B(char2,uchar2,uc2,int2,i2)
CONVERT_UA_B(char3,uchar3,uc3,int3,i3)
CONVERT_UA_B(char4,uchar4,uc4,int4,i4)

// char - float
CONVERT_A_B(char,c,float,f)
CONVERT_A_B(char2,c2,float2,f2)
CONVERT_A_B(char3,c3,float3,f3)
CONVERT_A_B(char4,c4,float4,f4)

// char - int
CONVERT_A_B(char,c,int,i)
CONVERT_A_B(char2,c2,int2,i2)
CONVERT_A_B(char3,c3,int3,i3)
CONVERT_A_B(char4,c4,int4,i4)


//char u - s
CONVERT_UA_B(char,uchar,uc,char,c)
CONVERT_UA_B(char2,uchar2,uc2,char2,c2)
CONVERT_UA_B(char3,uchar3,uc3,char3,c3)
CONVERT_UA_B(char4,uchar4,uc4,char4,c4)


CONVERT_UA_UB(int4,uint4,u4,char4,uchar4,uc4)

// SATURATED
CONST_COMPLEX(convert_sat_uc4_f4,uchar4,as_char4(convert_uchar4_sat(%)),(float4 x))






/*
 * WORK ITEM INDEX
 */
CONST_FUNC(get_work_dim,uint,get_work_dim,(),0)

CONST_FUNC(get_num_groups,uint,get_num_groups,(int dim),1)
CONST_FUNC(get_group_id,uint,get_group_id,(int dim),1)

CONST_FUNC(get_local_size,uint,get_local_size,(int dim),1)
CONST_FUNC(get_local_id,uint,get_local_id,(int dim),1)

CONST_FUNC(get_global_size,uint,get_global_size,(int dim),1)
CONST_FUNC(get_global_id,uint,get_global_id,(int dim),1)





/*
 * BARRIER
 */
REPLACE_FUNC(barrier_l,void,barrier(CLK_LOCAL_MEM_FENCE))
REPLACE_FUNC(barrier_lg,void,barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE))
REPLACE_FUNC(barrier_g,void,barrier(CLK_GLOBAl_MEM_FENCE))





/*
 * IMAGE
 */

CONST_FUNC(read_imagef_2d_i2,float4,read_imagef,(image2d_t NOPTR * image, sampler_t NOPTR * sampler, int2 coord),3)
CONST_FUNC(read_imagef_2d_f2,float4,read_imagef,(image2d_t NOPTR * image, sampler_t NOPTR * sampler, float2 coord),3)
CONST_FUNC(read_imagei_2d_i2,int4,read_imagei,(image2d_t NOPTR * image, sampler_t NOPTR * sampler, int2 coord),3)
CONST_FUNC(read_imagei_2d_f2,int4,read_imagei,(image2d_t NOPTR * image, sampler_t NOPTR * sampler, float2 coord),3)
CONST_FUNC(read_imageui_2d_i2,uint4,read_imageui,(image2d_t NOPTR * image, sampler_t NOPTR * sampler, int2 coord),3)
CONST_FUNC(read_imageui_2d_f2,uint4,read_imageui,(image2d_t NOPTR * image, sampler_t NOPTR * sampler, float2 coord),3)

//half4 read_imageh (image2d_t NOPTR * image, sampler_t NOPTR * sampler, int2 coord)         OPT
//half4 read_imageh (image2d_t NOPTR * image, sampler_t NOPTR * sampler, float2 coord)       OPT

FUNC(write_imagef_2d_f4,void,write_imagef,(image2d_t NOPTR * image, int2 coord, float4 color),3)
FUNC(write_imagei_2d_i4,void,write_imagei,(image2d_t NOPTR * image, int2 coord, int4 color),3)
FUNC(write_imageui_2d_u4,void,write_imageui,(image2d_t NOPTR * image, int2 coord, uint4 color),3)

//FUNC(write_imagef_3d_f4,void,write_imagef,(image3d_t NOPTR * image, int4 coord, float4 color),3)
//FUNC(write_imagei_3d_i4,void,write_imagei,(image3d_t NOPTR * image, int4 coord, int4 color),3)
//FUNC(write_imageui_3d_i4,void,write_imageui,(image3d_t NOPTR * image, int4 coord, uint4 color),3)


//void write_imageh (image2d_t NOPTR * image, int2 coord, half4 color)               OPT
CONST_FUNC(read_imagef_3d_i4,float4,read_imagef,(image3d_t NOPTR * image, sampler_t NOPTR * sampler, int4 coord),3)
CONST_FUNC(read_imagef_3d_f4,float4,read_imagef,(image3d_t NOPTR * image, sampler_t NOPTR * sampler, float4 coord),3)
CONST_FUNC(read_imagei_3d_i4,int4,read_imagei,(image3d_t NOPTR * image, sampler_t NOPTR * sampler, int4 coord),3)
CONST_FUNC(read_imagei_3d_f4,int4,read_imagei,(image3d_t NOPTR * image, sampler_t NOPTR * sampler, float4 coord),3)
CONST_FUNC(read_imageui_3d_i4,uint4,read_imageui,(image3d_t NOPTR * image, sampler_t NOPTR * sampler, int4 coord),3)
CONST_FUNC(read_imageui_3d_f4,uint4,read_imageui,(image3d_t NOPTR * image, sampler_t NOPTR * sampler, float4 coord),3)

//half4 read_imageh (image3d_t NOPTR * image, sampler_t NOPTR * sampler, int4 coord)         OPT
//half4 read_imageh (image3d_t NOPTR * image, sampler_t NOPTR * sampler, float4 coord)       OPT
                                                   
CONST_FUNC(get_image_width_2d,int,get_image_width,(image2d_t NOPTR * image),1)
CONST_FUNC(get_image_width_3d,int,get_image_width,(image3d_t NOPTR * image),1)
                                                   
CONST_FUNC(get_image_height_2d,int,get_image_height,(image2d_t NOPTR * image),1)
CONST_FUNC(get_image_height_3d,int,get_image_height,(image3d_t NOPTR * image),1)

CONST_FUNC(get_image_depth,int,get_image_depth,(image3d_t NOPTR * image),1)

CONST_FUNC(get_image_channel_data_type_2d,int,get_image_channel_data_type,(image2d_t NOPTR * image),1)
CONST_FUNC(get_image_channel_data_type_3d,int,get_image_channel_data_type,(image3d_t NOPTR * image),1)

CONST_FUNC(get_image_channel_order_2d,int,get_image_channel_order,(image2d_t NOPTR * image),1)
CONST_FUNC(get_image_channel_order_3d,int,get_image_channel_order,(image3d_t NOPTR * image),1)

CONST_FUNC(get_image_dim_2d,int2,get_image_dim,(image2d_t NOPTR * image),1)
CONST_FUNC(get_image_dim_3d,int4,get_image_dim,(image3d_t NOPTR * image),1)

//void write_imageh (image3d_t NOPTR * image, int4 coord, half4 color)               OPT

// native-intrinsic bindings
INTERNAL( \
	CONST_FUNC(floorf,float,floor,(float x),1) \
	CONST_FUNC(ceilf,float,ceil,(float x),1) \
	CONST_FUNC(sqrtf,float,sqrt,(float x),1) \
	CONST_FUNC(logf,float,log,(float x),1) \
	
	CONST_FUNC(atan2f,float,atan2,(float x, float y),2) \
	CONST_FUNC(llvm.pow.f32,float,pow,(float x, float y), 2) \
	
	CONST_FUNC(tanf,float,tan,(float x),1) \
	CONST_FUNC(cosf,float,cos,(float x),1) \
	CONST_FUNC(sinf,float,sin,(float x),1) \
	
	CONST_FUNC(atanf,float,atan,(float x),1) \
	CONST_FUNC(acosf,float,acos,(float x),1) \
	CONST_FUNC(asinf,float,asin,(float x),1) \
	CONST_FUNC(tansf,float,tan,(float x),1) \
)
	
	
#undef MATH_BUILTIN
#undef GEOMETRIC_BUILTIN
#undef COMMON_BUILTIN


#include "OCL_Frontend_Intrinsics.def"

